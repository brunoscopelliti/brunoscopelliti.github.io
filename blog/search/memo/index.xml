<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memo on Bruno Scopelliti</title>
    <link>https://brunoscopelliti.com/blog/search/memo/</link>
    <description>Recent content in Memo on Bruno Scopelliti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Feb 2023 07:00:00 +0100</lastBuildDate><atom:link href="https://brunoscopelliti.com/blog/search/memo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes on ‚ÄúDocker for Node.js Projects ‚Ä¶‚Äù</title>
      <link>https://brunoscopelliti.com/blog/notes-docker-for-node/</link>
      <pubDate>Sat, 25 Feb 2023 07:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/notes-docker-for-node/</guid>
      <description>Reference to the course: Docker for Node.js Projects from a Docker Captain
I will update this post while continuing advance through the course. Last updated: 25 February 2023.
Docker Compose basics Docker Compose is made of two things: the Compose CLI, and Compose file.
Docker Compose CLI is mostly a substitute for Docker CLI. It is most useful in development environment.
Docker Compose file is usually named docker-compose.yml:
services: web: image: sample-01 build: .</description>
    </item>
    
    <item>
      <title>Notes on ‚ÄúDocker Mastery: ‚Ä¶‚Äù</title>
      <link>https://brunoscopelliti.com/blog/notes-docker-mastery/</link>
      <pubDate>Sat, 25 Feb 2023 07:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/notes-docker-mastery/</guid>
      <description>Reference to the course: Docker Mastery: with Kubernetes +Swarm from a Docker Captain
I will update this post while continuing advance through the course. Last updated: 25 February 2023.
Image vs Container An Image is the application we want to run. A Container is an instance of that image running as a process. We can have many containers running off the same image.
Containers Run a container docker container run --publish 80:80 --name my_server nginx --publish (short -p): Publish port 80 on local machines, and sends all traffic from it, to program running in container on port 80.</description>
    </item>
    
    <item>
      <title>How to cherry-pick a branch using git</title>
      <link>https://brunoscopelliti.com/blog/git-cherry-pick-branch/</link>
      <pubDate>Sun, 24 Oct 2021 07:31:35 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/git-cherry-pick-branch/</guid>
      <description>Git has a command called cherry-pick, it permits to copy an existing commit to a different branch - it&amp;rsquo;s very useful.
Lately, I needed to cherry-pick all the commits existing on a certain branch - merging or rebasing the branch was not an option.
Surprisingly, this use case is not supported.
It is possible to cherry-pick a range of commits, though.
git cherry-pick start..end So we can split the problem into smaller pieces.</description>
    </item>
    
    <item>
      <title>How to delete last commit in git</title>
      <link>https://brunoscopelliti.com/blog/how-to-delete-last-commit-in-git/</link>
      <pubDate>Sat, 26 Jun 2021 15:12:42 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/how-to-delete-last-commit-in-git/</guid>
      <description>I always struggle to remember how to delete last commit in git - not that I&amp;rsquo;ve to do it often btw üòù
The git reset command permits to reset current HEAD to the specified state.
We can use the syntax HEAD~1 to specify the desired state; it means one commit back from current HEAD.
Putting everything together:
git reset --soft HEAD~1 The --soft flag assures the changes are preserved in the working copy.</description>
    </item>
    
    <item>
      <title>How to kill a process by port on MacOS</title>
      <link>https://brunoscopelliti.com/blog/how-to-kill-a-process-by-port-on-macos/</link>
      <pubDate>Sun, 25 Apr 2021 15:18:21 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/how-to-kill-a-process-by-port-on-macos/</guid>
      <description>Every now and then I find myself in need to kill a process, knowing only the port it&amp;rsquo;s using.
Below you can read the magic spell to kill a process in Unix-like system, running on a specific port.
lsof -nti:&amp;lt;PORT&amp;gt; | xargs kill -9 Copy, and replace &amp;lt;PORT&amp;gt; with the port number.
Kill a process programatically There are numerous npm modules that allow to kill a process programatically; fkill is my favorite.</description>
    </item>
    
    <item>
      <title>How to configure SSH keys for different GitHub accounts on the same pc</title>
      <link>https://brunoscopelliti.com/blog/how-to-configure-ssh-keys-for-different-github-accounts-on-the-same-pc/</link>
      <pubDate>Fri, 09 Apr 2021 23:26:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/how-to-configure-ssh-keys-for-different-github-accounts-on-the-same-pc/</guid>
      <description>Recently I fought - and at the end succeded - to configure two different set of SSH keys for different GitHub accounts on the same computer. I&amp;rsquo;m writing it down the procedure, so that I won&amp;rsquo;t have to repeat this fight again.
Create two different SSH keys, and add both on GitHub. The documentation on GitHub explains the details.
SSH config The SSH key config file is usually located at ~/.</description>
    </item>
    
    <item>
      <title>My MacOS setup checklist</title>
      <link>https://brunoscopelliti.com/blog/my-macos-setup-checklist/</link>
      <pubDate>Sun, 21 Mar 2021 21:30:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/my-macos-setup-checklist/</guid>
      <description>This week I formatted my macbook, and after many years of keeping sparse notes in too many different place, I decided it is time to put everything together in one place for future reference&amp;hellip; and what best place than my freshly restyled blog.
General preference Dock: don&amp;rsquo;t show recent applications.
Mission control: set hot corners.
Trackpad/Mouse: Secondary click, click in bottom right corner.
Keyboard: Use F1, F2, etc. keys as standard function keys.</description>
    </item>
    
    <item>
      <title>Git alias: git unstage</title>
      <link>https://brunoscopelliti.com/blog/git-alias-git-unstage/</link>
      <pubDate>Fri, 05 May 2017 09:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/git-alias-git-unstage/</guid>
      <description>Git, between the others, has a powerful feature called alias. It&amp;rsquo;s pretty straightforward&amp;hellip; Is there a command you always fail to remember? Add a more friendly shortcut! Is there a command you use frequently, that requires too much keystrokes? Create a shorter alias for it&amp;hellip; or perhaps, you think that a fundamental command is missing from git? Then you can create it yourself using existing commands.
My favourite alias is git unstage.</description>
    </item>
    
    <item>
      <title>Squash commits with git rebase</title>
      <link>https://brunoscopelliti.com/blog/squash-commits-with-git-rebase/</link>
      <pubDate>Mon, 23 Jan 2017 09:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/squash-commits-with-git-rebase/</guid>
      <description>That&amp;rsquo;s one thing I&amp;rsquo;ve just recently learned, and I&amp;rsquo;m writing down here for future reference.
Git&amp;rsquo;s rebase command permits to change the history of a git repository. Note that this is safe to do only for commits that haven&amp;rsquo;t already been shared to the team you are working with.
Why is it useful? Consider the following scenario:
bruno ~/git/hello-git $ git hist # git hist is a custom alias for &amp;#34;git log --pretty=format:&amp;#39;%h %ad | %s%d [%an]&amp;#39; --graph --date=short&amp;#34; * 8a3a015 2016-10-26 | The most perfect commit in the history of the Universe (HEAD -&amp;gt; master) [brunoscopelliti] * a48ca6d 2016-10-26 | Init repo [brunoscopelliti] I&amp;rsquo;m so proud of myself&amp;hellip; I&amp;rsquo;ve just pushed the best commit in the whole history of the Universe!</description>
    </item>
    
    <item>
      <title>How to disable ESLint rule via JavaScript comment</title>
      <link>https://brunoscopelliti.com/blog/how-to-disable-eslint-rule-via-javascript-comment/</link>
      <pubDate>Fri, 16 Sep 2016 09:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/how-to-disable-eslint-rule-via-javascript-comment/</guid>
      <description>Having recently switched to ESLint, I often find myself googling for how to disable a rule on a particular occurrence via JavaScript comment.
Hope writing this will help me to memorize the syntax, I&amp;rsquo;ll bookmark this page otherwise üòÖ.
// eslint-disable-next-line no-alert alert(&amp;#34;foo&amp;#34;); alert(&amp;#34;foo&amp;#34;); // eslint-disable-line no-alert It&amp;rsquo;s also possible to omit the name of the rule, and in this case lint is turned off for the entire line.</description>
    </item>
    
    <item>
      <title>CSS3 box-sizing property</title>
      <link>https://brunoscopelliti.com/blog/css3-box-sizing-property/</link>
      <pubDate>Tue, 30 Apr 2013 09:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/css3-box-sizing-property/</guid>
      <description>Recently I had to use the box-sizing property&amp;hellip; and every time I needed to search on Internet for the correct usages. So, last time this happened I&amp;rsquo;ve decided to write a post about it, with the hope this help me memorize it - or at least next time I can google for myself üôÇ
box-sizing, why? Until a few years ago, when you assigned an element a ruleset like the following, you got a square with size 120 pixel.</description>
    </item>
    
    <item>
      <title>SASS Cheatsheet</title>
      <link>https://brunoscopelliti.com/blog/sass-cheatsheet/</link>
      <pubDate>Wed, 20 Mar 2013 09:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/sass-cheatsheet/</guid>
      <description>Few months ago, I started working with SASS - I use SCSS syntax cause I care about my mental health.
It&amp;rsquo;s not particularly difficult, and if you learnt CSS, well, you could learn SASS.
One of the first thing I wanted was some kind of SASS cheatsheet - so I summarized the main features of SASS in a SASS file.
Variables Sass allows you to declare variables that can be used through the stylesheet.</description>
    </item>
    
  </channel>
</rss>
