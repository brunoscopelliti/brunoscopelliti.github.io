<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on Bruno Scopelliti</title>
    <link>https://brunoscopelliti.com/blog/search/git/</link>
    <description>Recent content in git on Bruno Scopelliti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Oct 2021 07:31:35 +0100</lastBuildDate><atom:link href="https://brunoscopelliti.com/blog/search/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to cherry-pick a branch using git</title>
      <link>https://brunoscopelliti.com/blog/git-cherry-pick-branch/</link>
      <pubDate>Sun, 24 Oct 2021 07:31:35 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/git-cherry-pick-branch/</guid>
      <description>Git has a command called cherry-pick, it permits to copy an existing commit to a different branch - it&amp;rsquo;s very useful.
Lately, I needed to cherry-pick all the commits existing on a certain branch - merging or rebasing the branch was not an option.
Surprisingly, this use case is not supported.
It is possible to cherry-pick a range of commits, though.
git cherry-pick start..end So we can split the problem into smaller pieces.</description>
    </item>
    
    <item>
      <title>How to delete last commit in git</title>
      <link>https://brunoscopelliti.com/blog/how-to-delete-last-commit-in-git/</link>
      <pubDate>Sat, 26 Jun 2021 15:12:42 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/how-to-delete-last-commit-in-git/</guid>
      <description>I always struggle to remember how to delete last commit in git - not that I&amp;rsquo;ve to do it often btw üòù
The git reset command permits to reset current HEAD to the specified state.
We can use the syntax HEAD~1 to specify the desired state; it means one commit back from current HEAD.
Putting everything together:
git reset --soft HEAD~1 The --soft flag assures the changes are preserved in the working copy.</description>
    </item>
    
    <item>
      <title>How to configure SSH keys for different GitHub accounts on the same pc</title>
      <link>https://brunoscopelliti.com/blog/how-to-configure-ssh-keys-for-different-github-accounts-on-the-same-pc/</link>
      <pubDate>Fri, 09 Apr 2021 23:26:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/how-to-configure-ssh-keys-for-different-github-accounts-on-the-same-pc/</guid>
      <description>Recently I fought - and at the end succeded - to configure two different set of SSH keys for different GitHub accounts on the same computer. I&amp;rsquo;m writing it down the procedure, so that I won&amp;rsquo;t have to repeat this fight again.
Create two different SSH keys, and add both on GitHub. The documentation on GitHub explains the details.
SSH config The SSH key config file is usually located at ~/.</description>
    </item>
    
    <item>
      <title>Git alias: git unstage</title>
      <link>https://brunoscopelliti.com/blog/git-alias-git-unstage/</link>
      <pubDate>Fri, 05 May 2017 09:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/git-alias-git-unstage/</guid>
      <description>Git, between the others, has a powerful feature called alias. It&amp;rsquo;s pretty straightforward&amp;hellip; Is there a command you always fail to remember? Add a more friendly shortcut! Is there a command you use frequently, that requires too much keystrokes? Create a shorter alias for it&amp;hellip; or perhaps, you think that a fundamental command is missing from git? Then you can create it yourself using existing commands.
My favourite alias is git unstage.</description>
    </item>
    
    <item>
      <title>Squash commits with git rebase</title>
      <link>https://brunoscopelliti.com/blog/squash-commits-with-git-rebase/</link>
      <pubDate>Mon, 23 Jan 2017 09:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/squash-commits-with-git-rebase/</guid>
      <description>That&amp;rsquo;s one thing I&amp;rsquo;ve just recently learned, and I&amp;rsquo;m writing down here for future reference.
Git&amp;rsquo;s rebase command permits to change the history of a git repository. Note that this is safe to do only for commits that haven&amp;rsquo;t already been shared to the team you are working with.
Why is it useful? Consider the following scenario:
bruno ~/git/hello-git $ git hist # git hist is a custom alias for &amp;#34;git log --pretty=format:&amp;#39;%h %ad | %s%d [%an]&amp;#39; --graph --date=short&amp;#34; * 8a3a015 2016-10-26 | The most perfect commit in the history of the Universe (HEAD -&amp;gt; master) [brunoscopelliti] * a48ca6d 2016-10-26 | Init repo [brunoscopelliti] I&amp;rsquo;m so proud of myself&amp;hellip; I&amp;rsquo;ve just pushed the best commit in the whole history of the Universe!</description>
    </item>
    
    <item>
      <title>Git workflow PRO tip</title>
      <link>https://brunoscopelliti.com/blog/git-productivity-trick/</link>
      <pubDate>Sat, 03 Dec 2016 09:00:00 +0100</pubDate>
      
      <guid>https://brunoscopelliti.com/blog/git-productivity-trick/</guid>
      <description>&amp;hellip; Yes, I know switching context is not so much productive, but sometimes we have to; so let&amp;rsquo;s better limit the issues! Here&amp;rsquo;s the tip ü•Å
Clone, and maintain in sync, your main working repository in at least two different folders on the same machine.
Key benefit: easy to switch context when you&amp;rsquo;re on a long running feature branch. Simple, and yet effective!</description>
    </item>
    
  </channel>
</rss>
